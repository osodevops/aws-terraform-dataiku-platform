---

- name: Set per-host facts
  set_fact:
    dss_node_hostname: "{{ansible_fqdn if dss_node_poll_fqdn else ansible_host}}"
  tags: [setup,dss-setup,dss]

- name: Increase system limits as required by DSS
  become: true
  pam_limits:
    domain: "{{dss_service_user}}"
    limit_item: "{{item}}"
    limit_type: "-"
    value: 65536
  loop:
    - nofile
    - nproc
  tags: [setup]

- name: Install postgres client
  become: true
  yum:
    name: postgresql
    state: present
    lock_timeout: 600
  tags: [setup]

- name: Install libXScrnSaver, at-spi2-atk and gtk3
  become: true
  yum:
    name:
      - "libXScrnSaver"
      - "at-spi2-atk"
      - "gtk3"
    state: present

- name: Install additional python packages via yum
  become: true
  yum:
    name:
      - "@Development tools"
      - "python3-devel"
      - "libffi-devel"
    state: present

- name: Install docker
  become: true
  command: "amazon-linux-extras install docker"
  tags: [setup]

- name: Start and enable docker
  become: true
  service:
    name: docker
    state: started
    enabled: true
  tags: [setup]

- name: Create service user
  become: true
  user:
    name: "{{dss_service_user}}"
    state: present
    home: "{{dss_service_user_home}}"
    groups:
      - docker
  tags: [setup, dss-setup]

- name: Create private directories
  become: true
  file:
    path: "{{item}}"
    state: directory
    owner: "{{dss_service_user}}"
    mode: "u=rwx,g=,o="
  loop:
    - "{{dss_data_dir_location}}"
    - "{{dss_install_dir_location}}"
  tags: [setup, dss-setup]

- name: Install jq via yum
  become: true
  yum:
    name:
      - "jq"
    state: present

- name: Download DSS
  become: true
  become_user: "{{dss_service_user}}"
  get_url:
    url: "https://cdn.downloads.dataiku.com/public/studio/{{dss_version}}/dataiku-dss-{{dss_version}}.tar.gz"
    dest: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}.tar.gz"
  tags: [setup, dss-setup]

- name: Unarchive DSS
  become: true
  become_user: "{{dss_service_user}}"
  unarchive:
    src: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}.tar.gz"
    dest: "{{dss_install_dir_location}}"
    creates: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}"
    remote_src: yes
  tags: [setup, dss-setup]

- name: Install DSS dependencies
  become: true
  shell:
    cmd: |
      {{dss_install_dir_location}}/dataiku-dss-{{dss_version}}/scripts/install/install-deps.sh -with-r -yes 2>&1 > /tmp/dss-install-deps.log
  tags: [setup, dss-setup]

- name: Get licence from parameter store
  become: true
  copy:
    dest: "{{licence_file_path}}"
    content: lookup('aws_ssm', "{{licence_param_store_path}}", decrypt=true)
    mode: 0400
  when: licence_source == "parameter-store"

- name: Get licence from secrets manager
  become: true
  copy:
    dest: "{{licence_file_path}}"
    content: lookup('amazon.aws.aws_secret', "{{licence_backend_path}}", bypath=true)
    mode: 0400
  when: licence_source == "secrets-manager"

- name: Get licence from Hashicorp Vault
  become: true
  copy:
    dest: "{{licence_file_path}}"
    content: lookup('hashi_vault', "secret={{licence_backend_path}} token={{vault_token}} url={{vault_endpoint}}")
    mode: 0400
  when: licence_source == "hashicorp-vault"

- name: Install this image as a design node
  include_tasks: design.yml
  when: dss_node_type == "design"

- name: Install this image as a api node
  include_tasks: api.yml
  when: dss_node_type == "api"

- name: Install this image as a automation node
  include_tasks: automation.yml
  when: dss_node_type == "automation"

- name: Install this image as a deployer node
  include_tasks: deployer.yml
  when: dss_node_type == "deployer"

- name: Install boot service
  become: true
  command: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}/scripts/install/install-boot.sh {{dss_data_dir_location}} dataiku"
  args:
    creates: "/etc/init.d/dataiku"
  tags: [dss]

- name: Store installed DSS version
  copy:
    dest: "{{dss_install_dir_location}}/.installed_version"
    content: "{{dss_version}}"
    mode: 0440
  become_user: "{{dss_service_user}}"

- name: Store installed DSS node type
  copy:
    dest: "{{dss_install_dir_location}}/.installed_node"
    content: "{{dss_node_type}}"
    mode: 0440
  become_user: "{{dss_service_user}}"

- name: Download aws-iam-authenticator
  get_url:
    url: "https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator"
    dest: "/usr/bin/aws-iam-authenticator"
    owner: root
    group: root
    mode: 0755
  become: true

- name: Deploy ecr-login script
  copy:
    src: "systemd/ecr-login/ecr-login.sh"
    dest: "/usr/local/bin/ecr-login.sh"
    owner: root
    group: root
    mode: 0755
  become: true

- name: Configure ecr login service
  copy:
    src: "systemd/ecr-login/dataiku-ecr-login.service"
    dest: "/usr/lib/systemd/system/dataiku-ecr-login.service"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Configure ecr login timer
  copy:
    src: "systemd/ecr-login/schedule-ecr-login.timer"
    dest: "/usr/lib/systemd/system/schedule-ecr-login.timer"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Configure the dataiku-ecr-login service
  systemd:
    name: dataiku-ecr-login
    enabled: yes
    state: stopped
    daemon_reload: yes

- name: Configure the ecr-login timer
  systemd:
    name: schedule-ecr-login.timer
    enabled: yes
    state: stopped
    daemon_reload: yes

- name: Deploy api-manager systemd unit
  copy:
    src: "systemd/configure-dataiku.service"
    dest: "/usr/lib/systemd/system/configure-dataiku.service"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Configure the configure-dataiku service
  systemd:
    name: configure-dataiku
    enabled: yes
    state: stopped
    daemon_reload: yes

- name: Create configuration python directory
  become: true
  file:
    path: "/opt/dataiku-python"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Deploy the dataiku api manager code
  copy:
    src: "dataiku-api-manager/dataiku_api_manager/"
    dest: "/opt/dataiku-python/dataiku_api_manager"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Deploy the dataiku json parser
  copy:
    src: "dataiku-api-manager/json_parser/"
    dest: "/opt/dataiku-python/json_parser"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Deploy the dataiku aws helper
  copy:
    src: "dataiku-api-manager/aws_helper/"
    dest: "/opt/dataiku-python/aws_helper"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Install pips required to run the api-configurator
  pip:
    executable: /bin/pip3
    name:
      - urllib3==1.26.15
      - pandas
      - psycopg2-binary
      - boto3
      - python-dateutil
      - nose
      - requests
  become: true

- name: Install dataiku-api-client pip
  pip:
    executable: /bin/pip3
    name:
      - "dataiku-api-client=={{dss_api_version}}"
    extra_args: --no-dependencies
  become: true

- name: Deploy the cgroups script
  copy:
    src: "systemd/cgroups/set_cgroups.sh"
    dest: "/usr/local/bin/set_cgroups.sh"
    owner: root
    group: root
    mode: 0755
  become: true

- name: Deploy configure-os systemd unit
  copy:
    src: "systemd/cgroups/dataiku-configure-os.service"
    dest: "/usr/lib/systemd/system/dataiku-configure-os.service"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Configure the configure-os service
  systemd:
    name: dataiku-configure-os
    enabled: yes
    state: stopped
    daemon_reload: yes

- name: Deploy volume-manager systemd unit
  copy:
    src: "systemd/volume-manager.service"
    dest: "/usr/lib/systemd/system/volume-manager.service"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Configure the volume-manager service
  systemd:
    name: volume-manager
    enabled: yes
    state: stopped
    daemon_reload: yes

- name: Deploy the dataiku volume manager code
  copy:
    src: "volume-manager/src/"
    dest: "/opt/dataiku-python/volume_manager"
    owner: root
    group: root
    mode: 0644
  become: true

- name: Deploy scripts to the user home directory
  copy:
    src: "scripts/"
    dest: "/home/{{dss_service_user}}/scripts"
    owner: "{{dss_service_user}}"
    group: "{{dss_service_user}}"
    mode: 0544
  become_user: "{{dss_service_user}}"

# Automate GitHub credential management
- name: GitHub credential management
  become: true
  become_user: "{{dss_service_user}}"
  shell:
    cmd: |
      "{{dss_service_user_home}}/scripts/credentials.sh"
  tags: [setup, github_credentials]

